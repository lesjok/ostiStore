{"version":3,"file":"static/js/366.7ae447bc.chunk.js","mappings":"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","sources":["firebase/FirebaseFavourites.tsx","pages/ProductPage/ProductPage.tsx"],"sourcesContent":["import {\n  arrayRemove,\n  arrayUnion,\n  doc,\n  onSnapshot,\n  setDoc,\n  updateDoc,\n} from 'firebase/firestore'\nimport { useAppSelector } from '../redux/dispatch'\n\nimport { useNavigate } from 'react-router-dom'\nimport type { IProduct } from '../types/type'\nimport { useEffect, useState } from 'react'\nimport { db } from './firebase.config'\n\nconst useLiked = (productId: number | null) => {\n  const currentUser = useAppSelector((state) => state.auth.user)\n  const navigate = useNavigate()\n  const [isLiked, setIsLiked] = useState(false)\n\n  useEffect(() => {\n    if (!currentUser || !productId) {\n      return\n    }\n\n    const unsubscribe = onSnapshot(\n      doc(db, 'users', currentUser.uid),\n      (snapshot) => {\n        const data = snapshot.data()\n        if (data && data.bookmarks) {\n          setIsLiked(\n            data.bookmarks.some((item: IProduct) => item.id === productId),\n          )\n        }\n      },\n    )\n    return () => {\n      unsubscribe()\n    }\n  }, [currentUser, productId])\n\n  const toggleIsLiked = async (product: IProduct | undefined) => {\n    if (!currentUser) {\n      navigate('/login')\n      return\n    }\n    const userDocRef = doc(db, 'users', currentUser.uid)\n    try {\n      await setDoc(userDocRef, {}, { merge: true })\n\n      const productData = {\n        id: product?.id,\n        title: product?.title,\n        price: product?.price,\n        image: product?.image,\n        description: product?.description,\n      }\n\n      await updateDoc(userDocRef, {\n        bookmarks: isLiked ? arrayRemove(productData) : arrayUnion(productData),\n      })\n\n      setIsLiked(!isLiked)\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error toggling like:', error)\n    }\n  }\n\n  return {\n    isLiked,\n    toggleIsLiked,\n  }\n}\n\nconst useLikedProducts = () => {\n  const currentUser = useAppSelector((state) => state.auth.user)\n  const [likedProducts, setLikedProducts] = useState<IProduct[]>([])\n\n  useEffect(() => {\n    if (!currentUser) {\n      return\n    }\n\n    const unsubDoc = onSnapshot(\n      doc(db, 'users', currentUser?.uid),\n      (doc) => {\n        setLikedProducts(doc.data()?.bookmarks.slice())\n      },\n      (error) => {\n        alert(error)\n        setLikedProducts([])\n      },\n    )\n\n    return () => unsubDoc()\n  }, [currentUser])\n\n  return { likedProducts }\n}\n\nexport { useLikedProducts, useLiked }\n","import { useAuthentication } from '../../firebase/FirebaseAuth'\nimport { useLiked } from '../../firebase/FirebaseFavourites'\nimport { useGetDetailProductQuery } from '../../redux/api'\nimport { useParams } from 'react-router-dom'\nimport './ProductPage.css'\nimport React from 'react'\n\nconst ProductPage = () => {\n  const { id } = useParams()\n  const { data: product } = useGetDetailProductQuery(Number(id))\n  const { isLogin } = useAuthentication()\n  const { isLiked, toggleIsLiked } = useLiked(Number(id))\n  const cardLikeButtonClassName = isLiked ? 'card__like-active' : ''\n\n  if (!product) {\n    return null\n  }\n  const likeHandler = () => {\n    toggleIsLiked(product)\n  }\n\n  return (\n    <section className=\"product\">\n      <img src={product.image} alt={product.title} className=\"product__img\" />\n      <div className=\"product__details\">\n        <h1 className=\"product__title\">{product.title}</h1>\n        <h3 className=\"product__price\">{product.price}$</h3>\n        <div className=\"product__description\">{product.description}</div>\n        {isLogin && (\n          <button\n            type=\"submit\"\n            onClick={likeHandler}\n            className={`card__like ${cardLikeButtonClassName}`}\n          />\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default ProductPage\n"],"names":["useLiked","productId","currentUser","useAppSelector","state","auth","user","navigate","useNavigate","isLiked","setIsLiked","useState","useEffect","unsubscribe","onSnapshot","doc","db","uid","snapshot","data","bookmarks","some","item","id","toggleIsLiked","async","userDocRef","setDoc","merge","productData","product","title","price","image","description","updateDoc","arrayRemove","arrayUnion","error","console","useLikedProducts","likedProducts","setLikedProducts","unsubDoc","_doc$data","slice","alert","ProductPage","useParams","useGetDetailProductQuery","Number","isLogin","useAuthentication","cardLikeButtonClassName","_jsxs","className","children","_jsx","src","alt","type","onClick","likeHandler","concat"],"sourceRoot":""}